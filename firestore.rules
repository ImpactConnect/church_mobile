rules_version = '2';
service cloud.firestore {
  match /databases/{database}/documents {
    // Allow read access to all documents for all users
    match /{document=**} {
      allow read: if true;
    }
    
    // Allow write access to specific collections
    match /categories/{categoryId} {
      allow write: if true;
    }
    
    match /preachers/{preacherId} {
      allow write: if true;
    }
    
    match /sermons/{sermonId} {
      allow write: if true;
    }
    
    match /tags/{tagId} {
      allow write: if true;
    }

    match /devotionals/{devotionalId} {
      allow write: if true;
    }

    match /events/{eventId} {
      allow read, write: if true;
    }

    match /live_streams/{live_streamId} {
      allow read, write: if true;
    }

    // Members collection
    match /members/{memberId} {
      allow read, write: if true;
    }

    // Announcements collection
    match /announcements/{announcementId} {
      allow read, write: if true;
    }

    // Testimonies collection
    match /testimonies/{testimonyId} {
      allow read, write: if true;
    }

    // Blog posts collection
    match /blog_posts/{postId} {
      allow read, write: if true;
    }

    // New carousel collections
    match /carousel_config/{document=**} {
      allow read, write: if true;
    }
    
    match /carousels/{carouselId}/{document=**} {
      allow read, write: if true;
    }

    // Library collections
    match /books/{bookId} {
      allow read: if true;
      // Only allow write access for admin operations
      allow write: if true; // TODO: Add admin authentication check
    }

    // Book categories collection
    match /book_categories/{categoryId} {
      allow read: if true;
      allow write: if true; // TODO: Add admin authentication check
    }

    // Book topics collection
    match /book_topics/{topicId} {
      allow read: if true;
      allow write: if true; // TODO: Add admin authentication check
    }

    // Book authors collection
    match /book_authors/{authorId} {
      allow read: if true;
      allow write: if true; // TODO: Add admin authentication check
    }

    // Community collections
    // Community Users Collection Rules
    match /community_users/{userId} {
      // Allow read access to authenticated users
      allow read: if request.auth != null;
      
      // Allow create only for new users
      allow create: if !exists(/databases/$(database)/documents/community_users/$(userId));
      
      // Allow update only to the user's own document
      allow update: if request.auth != null && request.auth.uid == userId;
    }

    match /community_posts/{postId} {
      allow read, write: if true;
    }

    match /community_comments/{commentId} {
      allow read, write: if true;
    }

    // Community Posts Collection Rules
    match /community_posts/{postId} {
      // Allow reading posts to all authenticated users
      allow read: if request.auth != null;
      
      // Allow creating posts to authenticated users
      allow create: if request.auth != null;
      
      // Allow updating/deleting only by the post author
      allow update, delete: if request.auth != null && 
        request.auth.uid == resource.data.author_id;
    }
    
    match /videos/{videoId} {
      allow read, write: if true;
    }

    // Gallery Collection Rules
    match /gallery/{galleryId} {
      allow read, write: if true;
    }

    // Gallery Collection Rules
    // match /gallery/{galleryId} {
    //   // Allow read access to authenticated users
    //   allow read: if request.auth != null;
      
    //   // Strict write rules for admin users
    //   allow create, update, delete: if request.auth != null 
    //     && request.auth.token.role == 'admin';
      
    //   // Validate gallery document structure
    //   function isValidGalleryDocument(data) {
    //     return data.keys().hasAll(['imageUrl', 'title', 'description', 'uploadedAt']) 
    //       && data.imageUrl is string 
    //       && data.title is string 
    //       && data.description is string 
    //       && data.uploadedAt is timestamp
    //       && data.imageUrl.matches('^https?://.*\.(jpg|jpeg|png|gif)$')
    //       && data.title.size() > 0 
    //       && data.title.size() <= 100
    //       && data.description.size() <= 500;
    //   }

    //   // Enforce document validation on create and update
    //   allow create: if isValidGalleryDocument(request.resource.data);
    //   allow update: if isValidGalleryDocument(request.resource.data);
    // }
  }
}
