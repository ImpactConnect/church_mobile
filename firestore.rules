rules_version = '2';
service cloud.firestore {
  match /databases/{database}/documents {
    // Helper functions
    function isMember() {
      return request.auth != null && exists(/databases/$(database)/documents/members/$(request.auth.uid));
    }
    
    function isVerifiedPhoneNumber(number) {
      let query = get(/databases/$(database)/documents/members);
      return query.data.phoneNumber == number;
    }

    // Allow read access to all documents for all users
    match /{document=**} {
      allow read: if true;
    }
    
    // Allow write access to specific collections
    match /categories/{categoryId} {
      allow write: if true;
    }
    
    match /preachers/{preacherId} {
      allow write: if true;
    }
    
    match /sermons/{sermonId} {
      allow write: if true;
    }
    
    match /tags/{tagId} {
      allow write: if true;
    }

    match /devotionals/{devotionalId} {
      allow write: if true;
    }

    match /events/{eventId} {
      allow read, write: if true;
    }

    match /live_streams/{live_streamId} {
      allow read, write: if true;
    }

    // Members collection
    match /members/{memberId} {
      allow read: if true;  // Public read for phone verification
      allow write: if false;  // Only admin can modify members
    }

    // Announcements collection
    match /announcements/{announcementId} {
      allow read, write: if true;
    }

    // Testimonies collection
    match /testimonies/{testimonyId} {
      allow read, write: if true;
    }

    // Blog posts collection
    match /blog_posts/{postId} {
      allow read, write: if true;
    }

    // New carousel collections
    match /carousel_config/{document=**} {
      allow read, write: if true;
    }
    
    match /carousels/{carouselId}/{document=**} {
      allow read, write: if true;
    }

    // Library collections
    match /books/{bookId} {
      allow read: if true;
      // Only allow write access for admin operations
      allow write: if true; // TODO: Add admin authentication check
    }

    // Book categories collection
    match /book_categories/{categoryId} {
      allow read: if true;
      allow write: if true; // TODO: Add admin authentication check
    }

    // Book topics collection
    match /book_topics/{topicId} {
      allow read: if true;
      allow write: if true; // TODO: Add admin authentication check
    }

    // Book authors collection
    match /book_authors/{authorId} {
      allow read: if true;
      allow write: if true; // TODO: Add admin authentication check
    }

    // Phone verification collection
    match /phone_verifications/{userId} {
      allow read: if request.auth != null && request.auth.uid == userId;
      allow write: if request.auth != null && request.auth.uid == userId
        && request.resource.data.keys().hasAll(['phoneNumber', 'verified'])
        && request.resource.data.verified is bool;
    }

    // Community posts
    match /community_posts/{postId} {
      allow read: if true;  // Anyone can read posts
      allow create: if isMember();  // Only members can create posts
      allow update: if isMember() 
        && (request.resource.data.diff(resource.data).affectedKeys()
            .hasOnly(['likesCount', 'commentsCount']));  // Only allow updating counts
      allow delete: if isMember() 
        && resource.data.authorId == request.auth.uid;  // Only author can delete
      
      // Likes subcollection
      match /likes/{likeId} {
        allow read: if true;
        allow write: if isMember() 
          && likeId == request.auth.uid;  // User can only manage their own like
      }
      
      // Comments subcollection
      match /comments/{commentId} {
        allow read: if true;
        allow create: if isMember();
        allow update, delete: if isMember() 
          && resource.data.authorId == request.auth.uid;  // Only author can modify
      }
    }

    // Default deny
    match /{document=**} {
      allow read, write: if false;
    }
  }
}
